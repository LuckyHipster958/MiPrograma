#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <fcntl.h>

char error_message[] = "An error has occurred\n";

void ejecutacomandos(char *texto) {
    char *argayu[12]; // Se debe inicializar dentro del bucle para evitar sobrescribir
    bool redirigir_salida = false;
    char *archivo_salida = NULL;
    bool ejecutar_en_fondo = false;

    // Eliminar salto de línea si está presente al final de la entrada
    if (texto[strlen(texto) - 1] == '\n') {
        texto[strlen(texto) - 1] = '\0';
    }

    // Dividir los comandos si hay múltiples comandos separados por '&'
    char *comando = strtok(texto, "&");
    while (comando != NULL) {
        int i = 0;
        bool redirigir_salida = false;
        char *archivo_salida = NULL;

        // Procesar cada comando individualmente
        char *token = strtok(comando, " "); // Tokenizar el comando por espacios
        int contador = 0;
        while (token != NULL) {
            if (strcmp(token, ">") == 0) {
                // Si encontramos ">", es redirección de salida
                redirigir_salida = true;
                token = strtok(NULL, " ");
                if (token == NULL || strtok(NULL, " ") != NULL) {
                    // Si no hay archivo o hay más de un argumento después de ">", error
                    fprintf(stderr, "%s", error_message);
                    exit(0);
                }
                archivo_salida = token;
                break;
            }
            argayu[i++] = token; // Guardamos el comando y sus argumentos
            token = strtok(NULL, " ");
            contador++;
        }

        argayu[i] = NULL;

        if (argayu[0] == NULL) {
            // Si no hay comando, pasamos al siguiente
            return;
        }

        pid_t pid = fork();
        if (pid == 0) { // Proceso hijo
            // Si hay redirección de salida, hacerlo aquí
            if (redirigir_salida) {
                int fd = open(archivo_salida, O_WRONLY | O_CREAT | O_TRUNC, 0644);
                if (fd < 0) {
                    fprintf(stderr, "%s", error_message);
                    exit(0);
                }
                dup2(fd, STDOUT_FILENO); // Redirigir salida estándar al archivo
                close(fd);
            }

            execvp(argayu[0], argayu); // Ejecutar el comando
            fprintf(stderr, "%s", error_message); // Si execvp falla
            exit(0);
        } else if (pid > 0) { // Proceso padre
            if (!ejecutar_en_fondo) {
                // Si no es un proceso en segundo plano, esperar a que termine
                int status;
                waitpid(pid, &status, 0);
            }
        } else {
            fprintf(stderr, "%s", error_message);
            exit(0);
        }

        // Continuar con el siguiente comando si es en segundo plano
        comando = strtok(NULL, "&");  // Continuamos con el siguiente comando
    }
}

int main(int argc, char *argv[]) {
    if (argc == 1) { // Modo interactivo
        char *texto = NULL;
        size_t line = 0;
        ssize_t nread;

        while (true) {
            printf("UVash> ");
            fflush(stdout);

            nread = getline(&texto, &line, stdin);
            if (nread == -1) break; // Detectar EOF

            if (strcmp(texto, "exit\n") == 0) {
                free(texto);
                exit(0);
            }

            ejecutacomandos(texto);
        }
        free(texto);
    } else if (argc == 2) { // Modo batch (archivo de comandos)
        FILE *fichero = fopen(argv[1], "r");
        if (fichero == NULL) {
            fprintf(stderr, "%s", error_message);
            exit(1);
        }

        char *texto = NULL;
        size_t line = 0;
        ssize_t nread;
        while ((nread = getline(&texto, &line, fichero)) != -1) {
            if (strcmp(texto, "exit\n") == 0) {
                free(texto);
                fclose(fichero);
                exit(0);
            }
            ejecutacomandos(texto);
        }

        free(texto);
        fclose(fichero);
    } else {
        fprintf(stderr, "%s", error_message);
        exit(1);
    }

    return 0;
}
